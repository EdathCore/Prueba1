// ‚úÖ Tienda de Objetos: Mejores y Edificios
// Objetos comunes (comprables m√∫ltiples veces)
const SHOP_OBJECTS = [
  {
    id: "webShooter",
    name: "Lanzatelara√±as",
    icon: "üï∏Ô∏è",
    baseCost: 15,
    basePps: 1,
    description: "Tus lanzatelara√±as autom√°ticos generan telara√±as por ti.",
    type: "repeatable"
  },
  {
    id: "auntMay",
    name: "T√≠a May",
    icon: "üëµ",
    baseCost: 100,
    basePps: 8,
    description: "T√≠a May te hornea galletas... ¬°de telara√±a!",
    type: "repeatable"
  },
  {
    id: "uncleBen",
    name: "T√≠o Ben",
    icon: "üë¥",
    baseCost: 500,
    basePps: 20,
    description: "Un gran poder conlleva una gran responsabilidad.",
    type: "repeatable"
  },
  {
    id: "mj",
    name: "MJ",
    icon: "‚ù§Ô∏è",
    baseCost: 20000,
    basePps: 2000,
    description: "MJ te inspira a ser mejor Spider-Man.",
    type: "repeatable"
  },
  {
    id: "gwen",
    name: "Gwen Stacy",
    icon: "üéì",
    baseCost: 22000,
    basePps: 2200,
    description: "Gwen te ayuda con tus estudios... y tu coraz√≥n.",
    type: "repeatable"
  },
  {
    id: "miles",
    name: "Miles Morales",
    icon: "üï∑Ô∏è",
    baseCost: 8000,
    basePps: 600,
    description: "¬°Miles ayuda a patrullar la ciudad!",
    type: "repeatable"
  },
  {
    id: "blackCat",
    name: "Felicia Hardy",
    icon: "üêæ",
    baseCost: 25000,
    basePps: 2400,
    description: "Felicia \"Black Cat\" coquetea... y roba telara√±as extra.",
    type: "repeatable"
  },
  {
    id: "otto",
    name: "Otto Octavius",
    icon: "üß†",
    baseCost: 30000,
    basePps: 2500,
    description: "¬°Doc Ock crea m√°quinas de telara√±a (sin querer)!",
    type: "repeatable"
  },
  {
    id: "greenGoblin",
    name: "Duende Verde",
    icon: "üéÉ",
    baseCost: 50000,
    basePps: 4000,
    description: "¬°Te regalo una bomba de calabaza!",
    type: "repeatable"
  },
  {
    id: "eddie",
    name: "Eddie Brock",
    icon: "üï∏Ô∏è",
    baseCost: 85000,
    basePps: 5000,
    description: "Nosotros somos Venom... y queremos telara√±as.",
    type: "repeatable"
  },
  {
    id: "harry",
    name: "Harry Osborn",
    icon: "üß™",
    baseCost: 120000,
    basePps: 0,
    description: "Harry activa un bono de +5 por clic durante 5 segundos.",
    type: "special"
  }
];

// Objetos √∫nicos (solo se compran una vez)
const PERMANENT_BUILDINGS = [
  {
    id: "mayHouse",
    name: "Casa de la T√≠a May",
    icon: "üè†",
    cost: 10000,
    description: "El hogar donde Peter aprendi√≥ responsabilidad.",
    effect: (gameState) => gameState.pointsPerClick += 1
  },
  {
    id: "dailyBugle",
    name: "Daily Bugle",
    icon: "üì∞",
    cost: 40000,
    description: "Publican tus haza√±as. ¬°M√°s fama, m√°s recursos!",
    effect: (gameState) => gameState.pointsPerClick += 5
  },
  {
    id: "midtown",
    name: "Midtown High School",
    icon: "üè´",
    cost: 70000,
    description: "La escuela que lo vio crecer... y balancearse.",
    effect: (gameState) => gameState.pointsPerClick += 5
  },
  {
    id: "oscorp",
    name: "Oscorp",
    icon: "üß™",
    cost: 90000,
    description: "Tecnolog√≠a para multiplicar tu eficiencia.",
    effect: (gameState) => gameState.pointsPerClick += 10
  },
  {
    id: "avengers",
    name: "Avenger Tower",
    icon: "üè¢",
    cost: 500000,
    description: "Recibes ayuda de los Vengadores.",
    effect: (gameState) => gameState.pointsPerClick += 50
  },
  {
    id: "starkIndustries",
    name: "Stark Industries",
    icon: "üß†",
    cost: 1000000,
    description: "Inteligencia y recursos ilimitados.",
    effect: (gameState) => gameState.pointsPerClick += 100
  },
  {
    id: "dimensionalPortal",
    name: "Portal Dimensional",
    icon: "üåå",
    cost: 2000000,
    description: "Accede al multiverso y recluta Spider-Mans.",
    effect: (gameState) => gameState.dimensionalPortalUnlocked = true
  }
];

// H√©roes reclutables
const RECRUITABLE_HEROES = [
  {
    id: "scarletSpider",
    name: "Scarlet Spider (Ben Reilly)",
    icon: "ü©∏",
    cost: 2200000,
    description: "Ben Reilly se une desde los clones del pasado."
  },
  {
    id: "superiorSpider",
    name: "Superior Spider-Man (Otto)",
    icon: "üëì",
    cost: 2400000,
    description: "Otto Octavius toma el control... de forma superior."
  },
  {
    id: "spiderHam",
    name: "Spider-Ham (Peter Porker)",
    icon: "üê∑",
    cost: 2600000,
    description: "Desde los c√≥mics m√°s absurdos... ¬°Peter Porker!"
  },
  {
    id: "killerSpider",
    name: "Spider-Man Asesino",
    icon: "üî™",
    cost: 2700000,
    description: "El Spider-Man que cruz√≥ la l√≠nea definitiva."
  },
  {
    id: "spiderNoir",
    name: "Spider-Noir",
    icon: "üïµÔ∏è",
    cost: 2750000,
    description: "Investiga las sombras del multiverso."
  },
  {
    id: "spiderPunk",
    name: "Spider-Punk",
    icon: "üé∏",
    cost: 3000000,
    description: "Rompe las reglas dimensionales con poder punk."
  },
  {
    id: "spiderGwen",
    name: "Spider-Gwen",
    icon: "üéß",
    cost: 3200000,
    description: "Gwen patrulla con estilo desde su universo."
  },
  {
    id: "peniParker",
    name: "Peni Parker",
    icon: "ü§ñ",
    cost: 3250000,
    description: "Peni y su robot SP//dr se unen al escuadr√≥n."
  },
  {
    id: "spider2099",
    name: "Spider-Man 2099",
    icon: "üîµ",
    cost: 4000000,
    description: "Miguel O'Hara mejora la tecnolog√≠a dimensional."
  },
  {
    id: "ps4Peter",
    name: "Spider-Man (PS4)",
    icon: "üéÆ",
    cost: 4500000,
    description: "Peter Parker de la era PS4, m√°s fuerte y m√°s r√°pido."
  },
  {
    id: "silk",
    name: "Cindy Moon/Silk",
    icon: "üï∏Ô∏è",
    cost: 5200000,
    description: "La ar√°cnida m√°s poderosa de Nueva York, maestra en el sigilo y el combate."
  },
  {
    id: "andrew",
    name: "Andrew Garfield",
    icon: "üé≠",
    cost: 6500000,
    description: "El spider-man m√°s emotivo y dram√°tico."
  },
  {
    id: "tobeyPeter",
    name: "Peter (Tobey Maguire)",
    icon: "üï∂Ô∏è",
    cost: 7000000,
    description: "Peter cl√°sico se lanza a balancearse."
  },
  {
    id: "tomPeter",
    name: "Peter (Tom Holland)",
    icon: "üåÜ",
    cost: 8000000,
    description: "Nuestro vecino amigable entra al multiverso."
  },
  {
    id: "spider2211",
    name: "Spider-Man 2211",
    icon: "üõ∞Ô∏è",
    cost: 9000000,
    description: "Spider-Man del futuro llega con tecnodrones."
  },
  {
    id: "captainUniverse",
    name: "Capit√°n Universo (Peter Parker)",
    icon: "üåå",
    cost: 10000000,
    description: "El casi dios Peter activa el Enigma Force."
  }
];

// Estado del juego
let gameState = {
  score: 0,
  pointsPerClick: 1,
  shopObjects: SHOP_OBJECTS.map((obj) => ({ ...obj, owned: 0, cost: obj.baseCost })),
  permanentBuildings: PERMANENT_BUILDINGS.map((b) => ({ ...b, purchased: false })),
  dimensionalPortalUnlocked: false,
  recruitableHeroesState: RECRUITABLE_HEROES.reduce((acc, hero) => {
    acc[hero.id] = { count: 0, currentCost: hero.cost };
    return acc;
  }, {}),
};

// DOM Elements
const scoreDisplay = document.getElementById("score");
const pointsPerSecondDisplay = document.getElementById("pointsPerSecond");
const clickButton = document.getElementById("clickButton");
const shopList = document.getElementById("shopList");
const buildingsRows = document.getElementById("buildingsRows");
const comicEffectContainer = document.getElementById("comicEffectContainer");

// Calcular puntos por segundo
function getTotalPPS() {
  const basePps = gameState.shopObjects.reduce((sum, obj) => sum + obj.basePps * obj.owned, 0);
  const heroPps = Object.values(gameState.recruitableHeroesState).reduce((sum, hero) => sum + hero.count * 500, 0);
  return basePps + heroPps;
}

// Actualizar display
function updateDisplay() {
  scoreDisplay.textContent = Math.floor(gameState.score);
  pointsPerSecondDisplay.textContent = getTotalPPS();
  updateShopButtons(); // Actualizar solo los botones de la tienda
}

// Actualizar solo los botones de la tienda
function updateShopButtons() {
  // Actualizar botones de objetos y edificios
  document.querySelectorAll(".shop-item-btn").forEach((btn) => {
    const type = btn.dataset.type;
    const idx = parseInt(btn.dataset.idx, 10);
    let isLocked = false;
    if (type === "object") {
      isLocked = gameState.score < gameState.shopObjects[idx].cost;
    } else if (type === "building") {
      isLocked = gameState.score < gameState.permanentBuildings[idx].cost || gameState.permanentBuildings[idx].purchased;
    }
    btn.disabled = isLocked;
  });

  // Actualizar botones de h√©roes reclutables
  document.querySelectorAll(".recruit-hero-btn").forEach((btn) => {
    const heroId = btn.dataset.heroId;
    const heroState = gameState.recruitableHeroesState[heroId];
    btn.disabled = gameState.score < heroState.currentCost;
  });
}

// Renderizar tienda
function renderShop() {
  shopList.innerHTML = "";

  // Renderizar objetos repetibles
  shopList.innerHTML += "<h3 class='shop-section-title'>Objetos de la Tienda</h3>";
  SHOP_OBJECTS.forEach((obj, index) => {
    const item = document.createElement("div");
    item.className = "shop-item" + (gameState.score < gameState.shopObjects[index].cost ? " locked" : "");
    item.innerHTML = `
      <div class="shop-item-icon">${obj.icon}</div>
      <div class="shop-item-info">
        <div class="shop-item-title">${obj.name}</div>
        <div class="shop-item-cost">Costo: <span>${gameState.shopObjects[index].cost}</span></div>
        <div class="shop-item-owned">Pose√≠dos: ${gameState.shopObjects[index].owned}</div>
        <div class="shop-item-desc">${obj.description}</div>
      </div>
      <button class="shop-item-btn" data-type="object" data-idx="${index}">Comprar</button>
    `;
    shopList.appendChild(item);
  });

  // Renderizar edificios permanentes
  shopList.innerHTML += "<h3 class='shop-section-title'>Edificios</h3>";
  PERMANENT_BUILDINGS.forEach((building, index) => {
    const item = document.createElement("div");
    item.className = "shop-item" + (gameState.score < building.cost ? " locked" : "");
    item.innerHTML = `
      <div class="shop-item-icon">${building.icon}</div>
      <div class="shop-item-info">
        <div class="shop-item-title">${building.name}</div>
        <div class="shop-item-cost">Costo: <span>${building.cost}</span></div>
        <div class="shop-item-desc">${building.description}</div>
      </div>
      <button class="shop-item-btn" data-type="building" data-idx="${index}">${gameState.permanentBuildings[index].purchased ? "Comprado" : "Comprar"}</button>
    `;
    shopList.appendChild(item);
  });

  // Renderizar H√©roes Reclutables
  shopList.innerHTML += "<h3 class='shop-section-title'>Spider-H√©roes</h3>";
  RECRUITABLE_HEROES.forEach(hero => {
    const heroState = gameState.recruitableHeroesState[hero.id];
    const item = document.createElement("div");
    item.className = "shop-item" + (gameState.score < heroState.currentCost ? " locked" : "");
    item.innerHTML = `
      <div class="shop-item-icon">${hero.icon}</div>
      <div class="shop-item-info">
        <div class="shop-item-title">${hero.name} (Nivel: ${heroState.count})</div>
        <div class="shop-item-cost">Costo: <span>${heroState.currentCost}</span></div>
        <div class="shop-item-desc">${hero.description}</div>
      </div>
      <button class="shop-item-btn recruit-hero-btn" data-hero-id="${hero.id}">Reclutar</button>
    `;
    shopList.appendChild(item);
  });

  // Actualizar botones de la tienda
  document.querySelectorAll(".shop-item-btn").forEach((btn) => {
    btn.onclick = () => {
      const type = btn.dataset.type;
      const idx = parseInt(btn.dataset.idx, 10);
      if (type === "object") {
        buyObject(idx);
      } else if (type === "building") {
        buyBuilding(idx);
      }
    };
  });

  // L√≥gica del bot√≥n de compra de h√©roes
  document.querySelectorAll(".recruit-hero-btn").forEach((btn) => {
    btn.onclick = () => {
      const heroId = btn.dataset.heroId;
      const hero = RECRUITABLE_HEROES.find(h => h.id === heroId);
      const state = gameState.recruitableHeroesState[heroId];
      if (gameState.score >= state.currentCost) {
        gameState.score -= state.currentCost;
        state.count++;
        state.currentCost = Math.floor(hero.cost * Math.pow(1.25, state.count));
        updateDisplay();
        renderShop();
      }
    };
  });
}

// Comprar objeto repetible
function buyObject(idx) {
  const obj = gameState.shopObjects[idx];
  if (gameState.score >= obj.cost) {
    gameState.score -= obj.cost;
    gameState.score = Math.max(0, Math.round(gameState.score * 1e6) / 1e6);
    if (gameState.score < 0.00001) gameState.score = 0;
    obj.owned++;
    if (obj.type === "special") {
      // Aplicar efecto especial
      if (obj.id === "harry") {
        gameState.harryBonus = true;
        gameState.pointsPerClick += 5;
        setTimeout(() => {
          gameState.harryBonus = false;
          gameState.pointsPerClick -= 5;
        }, 5000);
      }
    }
    // Escalado de coste
    obj.cost = Math.floor(obj.baseCost * Math.pow(1.15, obj.owned));
    updateDisplay();
    renderShop();
  }
}

// Comprar edificio √∫nico
function buyBuilding(idx) {
  const b = gameState.permanentBuildings[idx];
  if (!b.purchased && gameState.score >= b.cost) {
    gameState.score -= b.cost;
    gameState.score = Math.max(0, Math.round(gameState.score * 1e6) / 1e6);
    if (gameState.score < 0.00001) gameState.score = 0;
    b.purchased = true;
    b.effect(gameState);
    updateDisplay();
    renderShop();
  }
}

// Click principal
clickButton.addEventListener("click", () => {
  gameState.score += gameState.pointsPerClick;
  updateDisplay();
});

// Sistema de generaci√≥n autom√°tica de puntos
function generatePoints() {
  const pps = getTotalPPS();
  gameState.score += pps;
  updateDisplay();
}

// Iniciar generaci√≥n autom√°tica
generatePoints();
setInterval(generatePoints, 1000); // Cada segundo

// Efecto de c√≥mic al hacer clic
function showComicEffect() {
  const comicEffectContainer = document.getElementById('comicEffectContainer');
  const el = document.createElement('div');
  
  // Array de onomatopeyas
  const onomatopeyas = [
    'POW!', 'BAM!', 'KAPOW!', 'ZAP!', 'BOOM!', 'CRASH!', 'WHAM!', 
    'BLOOP!', 'TWIP!', 'ZOOM!', 'SMASH!', 'KABOOM!', 'WHACK!', 'CRUNCH!',
    'BLOOP!', 'ZAP!', 'ZING!', 'WHIZ!', 'CRACK!', 'BANG!', 'THUD!'
  ];
  
  // Elegir una onomatopeya aleatoria
  const onomatopeya = onomatopeyas[Math.floor(Math.random() * onomatopeyas.length)];
  
  // Elegir una animaci√≥n aleatoria
  const animations = ['comicBounce', 'comicPop', 'comicTwirl', 'comicFade'];
  const animation = animations[Math.floor(Math.random() * animations.length)];
  
  // Elegir un color aleatorio
  const colors = ['blue', 'red', 'yellow', 'green', 'purple', 'orange', 'pink'];
  const color = colors[Math.floor(Math.random() * colors.length)];
  
  // Obtener posici√≥n del bot√≥n
  const button = document.getElementById('clickButton');
  const rect = button.getBoundingClientRect();
  const buttonCenterX = rect.left + rect.width / 2;
  const buttonCenterY = rect.top + rect.height / 2;
  
  // Calcular posici√≥n aleatoria alrededor del bot√≥n
  const radius = 80; // Radio m√°ximo reducido
  const angle = Math.random() * 2 * Math.PI;
  const x = buttonCenterX + radius * Math.cos(angle);
  const y = buttonCenterY + radius * Math.sin(angle);
  
  el.className = `comic-effect ${color}`;
  el.style.animation = `${animation} 0.7s ease-out`;
  el.textContent = onomatopeya;
  el.style.left = `${x}px`;
  el.style.top = `${y}px`;
  el.style.transform = `translateX(-50%) translateY(-50%)`;
  
  comicEffectContainer.appendChild(el);
  
  // A√±adir un ligero retraso aleatorio para variedad
  const delay = Math.random() * 100;
  setTimeout(() => {
    el.remove();
  }, 700);
}

clickButton.addEventListener("click", showComicEffect);

// Noticias del Daily Bugle
const NEWS = [
  {
    title: "¬°NUEVO CONFLICTO DE VENGADORES!",
    subtitle: "Tensiones entre equipos",
    body: "Los Thunderbolts, conocidos como 'The New Avengers', han causado controversia en el mundo superheroico. Sam Wilson, Capit√°n Am√©rica, ha expresado su descontento con la formaci√≥n de un nuevo equipo de Vengadores."
  },
  {
    title: "SINIESTRO SEXTETO EN ACCI√ìN!",
    subtitle: "Ataque masivo en Nueva York",
    body: "El Siniestro Sexteto liderado por Doc Ock ha sido avistado en el centro de la ciudad. Spider-Man se prepara para enfrentar a sus archienemigos en una batalla √©pica."
  },
  {
    title: "¬°ATENCI√ìN! HOMBRE DE ARENA EN LIBERTAD",
    subtitle: "Robo en el Banco Central",
    body: "El criminal conocido como Hombre de Arena ha sido visto robando el Banco Central de Nueva York. La polic√≠a ha pedido ayuda a Spider-Man para detenerlo."
  },
  {
    title: "DESCUBRIMIENTO HIST√ìRICO",
    subtitle: "El Capit√°n Am√©rica original",
    body: "Arque√≥logos han encontrado pruebas del proyecto Super Soldado original. Se cree que este descubrimiento podr√≠a cambiar nuestra comprensi√≥n de la historia de los Vengadores."
  },
  {
    title: "¬°NUEVO PATRULLAJE!",
    subtitle: "Miles Morales en acci√≥n",
    body: "El joven Spider-Man de Brooklyn ha comenzado a patrullar la ciudad. Los ciudadanos est√°n emocionados por tener un nuevo h√©roe en sus calles."
  },
  {
    title: "CHASQUIDO: 5 A√ëOS DESPU√âS",
    subtitle: "Impacto en la sociedad",
    body: "La sociedad contin√∫a lidiando con las consecuencias del Chasquido. Expertos debaten sobre la mejor manera de reconstruir y ayudar a los afectados."
  },
  {
    title: "BLACK CAT EN ACCI√ìN",
    subtitle: "Robo espectacular",
    body: "Felicia Hardy, conocida como Black Cat, ha sido vista robando una joyer√≠a de lujo. Spider-Man se ha comprometido a detenerla, pero la relaci√≥n entre ambos es complicada."
  },
  {
    title: "VENGADORES: NUEVA ALIANZA",
    subtitle: "Reuni√≥n de h√©roes",
    body: "Los Vengadores originales se han reunido para discutir la amenaza de los Thunderbolts. Se espera una conferencia de prensa para anunciar sus planes."
  },
  {
    title: "OSCORP: NUEVOS DESARROLLOS",
    subtitle: "Tecnolog√≠a avanzada",
    body: "Norman Osborn ha anunciado nuevos proyectos en Oscorp. Se rumorea que est√°n desarrollando tecnolog√≠a que podr√≠a cambiar el juego en el mundo superheroico."
  },
  {
    title: "DIMENSIONAL PORTAL ACTIVO",
    subtitle: "Alerta de multiverso",
    body: "Cient√≠ficos han detectado actividad en el portal dimensional. Se teme que esto podr√≠a traer m√°s visitantes del multiverso a nuestra realidad."
  }
];

// Funci√≥n para mostrar noticias con animaci√≥n de rebote
function showRandomNews() {
  const randomIndex = Math.floor(Math.random() * NEWS.length);
  const news = NEWS[randomIndex];
  
  // Primero ocultamos los elementos con animaci√≥n de salida
  const subtitle = document.getElementById('newsSubtitle');
  const body = document.getElementById('newsBody');
  
  subtitle.classList.remove('visible');
  body.classList.remove('visible');
  
  // Actualizamos el contenido
  document.getElementById('newsTitle').textContent = news.title;
  subtitle.textContent = news.subtitle;
  body.textContent = news.body;
  
  // Esperamos que la animaci√≥n de salida termine
  setTimeout(() => {
    // Mostramos los elementos con animaci√≥n de entrada
    subtitle.classList.add('visible');
    body.classList.add('visible');
  }, 400); // Ajustado para coincidir con la duraci√≥n de la animaci√≥n de salida
}

// Actualizar noticias cada 7 segundos
setInterval(showRandomNews, 7000);

// Mostrar la primera noticia al inicio
showRandomNews();

// Inicializar
updateDisplay();
renderShop();

// Actualizar el display de puntos por segundo cada segundo
setInterval(() => {
  pointsPerSecondDisplay.textContent = Math.floor(getTotalPPS());
}, 1000);
